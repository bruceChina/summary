http://www.cnblogs.com/nulige/p/6128816.html		any 与 all
http://blog.csdn.net/heybob/article/details/48373021	str basestring unicode
http://www.cnblogs.com/sesshoumaru/p/5977009.html	bin
http://www.cnblogs.com/sesshoumaru/p/5979159.html	bytearray
http://blog.csdn.net/fei_gao/article/details/5914759	bool
http://www.cnblogs.com/sesshoumaru/archive/2016/10/19/5979073.html	bool
http://www.cnblogs.com/sesshoumaru/p/5983979.html	callable
http://blog.csdn.net/youfuchen/article/details/21107099	chr ord
http://blog.csdn.net/handsomekang/article/details/9615239	classmethod staticmethod
http://www.cnblogs.com/elie/p/5876210.html			classmethod staticmethod
http://www.cnblogs.com/dadadechengzi/p/6159289.html		compile
http://www.jb51.net/article/57798.htm				complex
http://www.cnblogs.com/sesshoumaru/p/5989234.html		delattr
http://www.jb51.net/article/55553.htm				dict
http://blog.csdn.net/caimouse/article/details/41384985		divmod
http://blog.csdn.net/churximi/article/details/51648388		enumerate
http://www.cnblogs.com/liu-shuai/p/6098246.html			eval
http://blog.csdn.net/zhanh1218/article/details/37562167		eval
http://www.jb51.net/article/55529.htm				eval
http://blog.csdn.net/maoyongfan3/article/details/43448511	execfile
http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html		file
http://blog.csdn.net/werm520/article/details/6652061				file
http://blog.csdn.net/sinchb/article/details/8351685				file
http://www.cnblogs.com/Lambda721/p/6128424.html					filter
http://www.cnblogs.com/panwenbin-logs/p/5519617.html				frozenset
http://www.cnblogs.com/cenyu/p/5713686.html					hasattr setattr getattr
http://blog.csdn.net/sxingming/article/details/52061630				globals locals
http://www.cnblogs.com/sesshoumaru/p/6010180.html				hash
http://blog.csdn.net/caimouse/article/details/42290285				hex
http://www.jb51.net/article/54275.htm						isinstance
http://blog.csdn.net/caimouse/article/details/42612687				issubclass
http://blog.csdn.net/bluebird_237/article/details/38894617			iter
https://my.oschina.net/zyzzy/blog/115096					map
http://www.cnblogs.com/sesshoumaru/p/6035548.html				memoryview
http://www.cnblogs.com/sesshoumaru/p/6037922.html				next
http://python.jobbole.com/81967/						properties
http://www.cnblogs.com/XXCXY/p/5180245.html					reduce
http://blog.csdn.net/chjjunking/article/details/6859135				reduce
http://www.cnblogs.com/itdyb/p/5046415.html					repr
http://www.cnpythoner.com/post/251.html						repr
http://www.cnblogs.com/hongten/p/hongten_python_range.html			range 
http://www.cnblogs.com/zhangjing0502/archive/2012/05/16/2503880.html		range 与 xrange
http://blog.csdn.net/sxingming/article/details/51353379				reversed
http://blog.csdn.net/u011649536/article/details/49301783			round
http://shmilyaw-hotmail-com.iteye.com/blog/1782733				slice
http://www.cnblogs.com/lovemo1314/archive/2011/05/03/2035005.html		super
http://blog.csdn.net/caimouse/article/details/46489079				vars
http://www.cnblogs.com/sesshoumaru/p/6130031.html				vars
http://www.cnblogs.com/frydsh/archive/2012/07/10/2585370.html			zip
http://david-je.iteye.com/blog/1756788						__import__()
http://www.jb51.net/article/53044.htm						apply
http://www.cnblogs.com/Lance-M/archive/2013/07/16/3193528.html			coerce
https://www.androiddev.net/python8/						intern
http://www.jb51.net/article/63208.htm						NotImplemented
http://www.php.cn/python-tutorials-362830.html					python的常量
http://bbs.csdn.net/topics/280046457						is is not == != 的区别
http://blog.csdn.net/hunter8777/article/details/6413839				conjugate

()iter
class fibo():
    def __init__(self):
        self.a, self.b = 0, 1
    def __iter__(self):
        return self
    def next(self):
        self.a, self.b = self.b, self.a + self.b
        if self.a > 10000:
            raise StopIteration();
        return self.a

for n in fibo():
    print n
           

()globals 和locals

#-*- coding=utf-8 -*-
z = 7 #定义全局变量
def foo(arg):
    x = 1
    print locals()
    print 'x=',x
    locals()['x'] = 2 #修改的是局部名字空间的拷贝，而实际的局部名字空间中的变量值并无影响。
    print locals()
    print "x=",x

foo(3)
print globals()
print 'z=',z
globals()["z"] = 8 #globals（）返回的是实际的全局名字空间，修改变量z的值
print globals()
print "z=",z


{'x': 1, 'arg': 3}
x= 1
{'x': 1, 'arg': 3}
x= 1
{'foo': <function foo at 0x7f78d83d65f0>, '__builtins__': <module '__builtin__' (built-in)>, '__file__': '1.py', '__package__': None, '__name__': '__main__', 'z': 7, '__doc__': None}
z= 7
{'foo': <function foo at 0x7f78d83d65f0>, '__builtins__': <module '__builtin__' (built-in)>, '__file__': '1.py', '__package__': None, '__name__': '__main__', 'z': 8, '__doc__': None}
z= 8



()filter
def is_None(x):
    if x != None:
        return True

l = ['1', '2', None, '4']
f = filter(is_None, l)
print f


()execfile
 #execfile.py 
import sys 
if __name__ == '__main__': 
        print sys.argv 
        print 'execfile'
        sys.argv = 'appcfg.py update sdblog'.split(); 
        print sys.argv 
        execfile('main.py')
#main.py 
import sys 
def main(): 
        print 'main'
        print sys.argv 
if __name__ == '__main__': 
        main()


D:\GAE\dev>execfile.py test 
['D:\\GAE\\dev\\execfile.py', 'test'] 
execfile
['appcfg.py', 'update', 'sdblog'] 
main 
['appcfg.py', 'update', 'sdblog']



()eval
可以把list,tuple,dict和string相互转化。
#################################################
字符串转换成列表
>>>a = "[[1,2], [3,4], [5,6], [7,8], [9,0]]"
>>>type(a)
<type 'str'>
>>> b = eval(a)
>>> print b
[[1, 2], [3, 4], [5, 6], [7, 8], [9, 0]]
>>> type(b)
<type 'list'>
#################################################
字符串转换成字典
>>> a = "{1: 'a', 2: 'b'}"
>>> type(a)
<type 'str'>
>>> b = eval(a)
>>> print b
{1: 'a', 2: 'b'}
>>> type(b)
<type 'dict'>
#################################################
字符串转换成元组
>>> a = "([1,2], [3,4], [5,6], [7,8], (9,0))"
>>> type(a)
<type 'str'>
>>> b = eval(a)
>>> print b
([1, 2], [3, 4], [5, 6], [7, 8], (9, 0))
>>> type(b)
<type 'tuple'>

()enumerate
如果对一个列表，既要遍历索引又要遍历元素时，首先可以这样写
list1 = ["这", "是", "一个", "测试"]
for i in range (len(list1)):
    print i ,list1[i]

list1 = ["这", "是", "一个", "测试"]
for index, item in enumerate(list1):
    print index, item
>>>
0 这
1 是
2 一个
3 测试


enumerate还可以接收第二个参数，用于指定索引起始值
list1 = ["这", "是", "一个", "测试"]
for index, item in enumerate(list1, 1):
    print index, item
>>>
1 这
2 是
3 一个
4 测试

()divmod
print('divmod(2, 4):', divmod(2, 4))  
print('divmod(28, 4):', divmod(28, 4))  
print('divmod(27, 4):', divmod(27, 4))  
print('divmod(25.6, 4):', divmod(25.6, 4))  
print('divmod(2, 0.3):', divmod(2, 0.3))  

divmod(2, 4): (0, 2)
divmod(28, 4): (7, 0)
divmod(27, 4): (6, 3)
divmod(25.6, 4): (6.0, 1.6000000000000014)
divmod(2, 0.3): (6.0, 0.20000000000000007)

()dict
>>> website = {1:"google","second":"baidu",3:"facebook","twitter":4}
 
>>>#用d.keys()的方法得到dict的所有键，结果是list
>>> website.keys()
[1, 'second', 3, 'twitter']
 
>>>#用d.values()的方法得到dict的所有值，如果里面没有嵌套别的dict，结果是list
>>> website.values()
['google', 'baidu', 'facebook', 4]
 
>>>#用items()的方法得到了一组一组的键值对，
>>>#结果是list，只不过list里面的元素是元组
>>> website.items()
[(1, 'google'), ('second', 'baidu'), (3, 'facebook'), ('twitter', 4)]


()delattr
函数作用用来删除指定对象的指定名称的属性，和setattr函数作用相反
>>> class A:
    def __init__(self,name):
        self.name = name
    def sayHello(self):
        print('hello',self.name)

#测试属性和方法
>>> a.name
'小麦'
>>> a.sayHello()
hello 小麦

#删除属性
>>> delattr(a,'name')
>>> a.name
Traceback (most recent call last):
  File "<pyshell#47>", line 1, in <module>
    a.name
AttributeError: 'A' object has no attribute 'name'

当属性不存在的时候，会报错
>>> a.name #属性name已经删掉，不存在
Traceback (most recent call last):
  File "<pyshell#47>", line 1, in <module>
    a.name
AttributeError: 'A' object has no attribute 'name'

>>> delattr(a,'name') #再删除会报错
Traceback (most recent call last):
  File "<pyshell#48>", line 1, in <module>
    delattr(a,'name')
AttributeError: name

不能删除对象的方法
>>> a.sayHello
<bound method A.sayHello of <__main__.A object at 0x03F014B0>>
>>> delattr(a,'sayHello') #不能用于删除方法
Traceback (most recent call last):
  File "<pyshell#50>", line 1, in <module>
    delattr(a,'sayHello')
AttributeError: sayHello


()complex
print complex(1)
print complex('2+1j')
print complex(2,5)


()compile
s = "print \"hello world\""
c = compile(s, '', 'exec')
exec(c)

s1 = "1+2+3"
c1 = compile(s1, '', 'eval')
print eval(c1)

s2 = '''
i = 1
for i in [1, 2, 4]:
 print i
'''
c2 = compile(s2, '', 'exec')
exec(c2)


cmp_code=compile('print "single"','','single')
exec cmp_code
cmp_code

eval_code='1+2'
cmp_code2=compile(eval_code,'','single')
eval(cmp_code2)
cmp_code2

cmp_code=compile('raw_input("pls input: ")','','single')
exec cmp_code
eval(cmp_code)
cmp_code


()classmethod和staticmethod

class A(object):
        def foo(self, x):
                print "foo(%s, %s)" % (self, x)
        @classmethod
        def class_foo(cls, x):
                print "class_foo(%s, %s)" % (cls, x)

        @staticmethod
        def static_foo(x):
                print "static_foo(%s)" % (x)
a = A()

a.foo(1)
a.class_foo(2)
a.static_foo(3)

#A.foo(1)    //报错
A.class_foo(2)
A.static_foo(3)

普通方法只能用类的实例进行调用
classmethod 必须带有cls参数,可以用类和实例进行调用
staticmethod 可以不带参数,可以用类和实例进行调用



()chr ord
print chr(0x30), chr(0x31), chr(0x61)
print chr(48), chr(49), chr(97)
0 1 a

print ord('a'), ord('0'), ord('1') 
97 48 49  

print "%x %x %x" % (ord('a'), ord('0'), ord('1'))  
61 30 31  
print "%#x %#x %#x" % (ord('a'), ord('0'), ord('1'))  
0x61 0x30 0x31  

一个字符串str1，转化成另一个字符串str2， 使得 str2[i] = str1[i] - i
str1 = "eb;3ej8h"  
for i in range(0, len(str1)):  
    print chr((ord(str1[i])-i)),  

e a 9 0 a e 2 a  
	

()callable
用来检测对象是否可被调用，可被调用指的是对象能否使用()括号的方法调用
>>> callable(callable)
True
>>> callable(1)
False
>>> 1()
Traceback (most recent call last):
File "<pyshell#5>", line 1, in <module>
1()
TypeError: 'int' object is not callable

可调用对象，在实际调用也可能调用失败；但是不可调用对象，调用肯定不成功

类对象都是可被调用对象，类的实例对象是否可调用对象，取决于类是否定义了__call__方法
>>> class A: #定义类A
    pass

>>> callable(A) #类A是可调用对象
True
>>> a = A() #调用类A
>>> callable(a) #实例a不可调用
False
>>> a() #调用实例a失败
Traceback (most recent call last):
  File "<pyshell#31>", line 1, in <module>
    a()
TypeError: 'A' object is not callable


>>> class B: #定义类B
    def __call__(self):
        print('instances are callable now.')

        
>>> callable(B) #类B是可调用对象
True
>>> b = B() #调用类B
>>> callable(b) #实例b是可调用对象
True
>>> b() #调用实例b成功
instances are callable now.


()bool
在数值上下文环境中，True被当作1，False被当作0，例如 True+3=>4

其他类型值转换bool值时除了''、""、''''''、""""""、0、()、[]、{}、None、0.0、0L、0.0+0.0j、False为False，其他都为True 例如 bool(-2)=>True

参数如果缺省，则返回False
>>> bool() #未传入参数
False

传入布尔类型时，按原值返回
>>> bool(True)
True
>>> bool(False)
False

传入字符串时，空字符串返回False，否则返回True
>>> bool('')
False
>>> bool('0')
True

传入数值时，0值返回False，否则返回True
>>> bool(0)
False
>>> bool(1)
True
>>> bool(-1.0)
True




()bytearray
1 返回值为一个新的字节数组
2 当3个参数都不传的时候，返回长度为0的字节数组
>>> b = bytearray()
>>> b
bytearray(b'')
>>> len(b)
0

3 当source参数为字符串时，encoding参数也必须提供，函数将字符串使用str.encode方法转换成字节数组
>>> bytearray('中文')
Traceback (most recent call last):
  File "<pyshell#48>", line 1, in <module>
    bytearray('中文')
TypeError: string argument without an encoding
>>> bytearray('中文','utf-8')
bytearray(b'\xe4\xb8\xad\xe6\x96\x87')

4 当source参数为整数时，返回这个整数所指定长度的空字节数组
>>> bytearray(2)
bytearray(b'\x00\x00')
>>> bytearray(-2) #整数需大于0，使用来做数组长度的
Traceback (most recent call last):
  File "<pyshell#51>", line 1, in <module>
    bytearray(-2)
ValueError: negative count

5 当source参数为实现了buffer接口的object对象时，那么将使用只读方式将字节读取到字节数组后返回
6 当source参数是一个可迭代对象，那么这个迭代对象的元素都必须符合0 <= x < 256，以便可以初始化到数组里
>>> bytearray([1,2,3])
bytearray(b'\x01\x02\x03')
>>> bytearray([256,2,3]) #不在0-255范围内报错
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    bytearray([256,2,3])
ValueError: byte must be in range(0, 256)


()bin
1 将一个整形数字转换成二进制字符串
>>> b = bin(3) 
>>> b
'0b11'
>>> type(b) #获取b的类型
<class 'str'>

2 如果参数x不是一个整数，则x必须定义一个 __index__() 方法，并且方法返回值必须是整数

2.1如果对象不是整数，则报错
>>> class A:
pass

>>> a = A()
>>> bin(a) 
Traceback (most recent call last):
  File "<pyshell#15>", line 1, in <module>
    bin(a)
TypeError: 'A' object cannot be interpreted as an integer


2.2 如果对象定义了__index__方法，但返回值不是整数，报错
>>> class B:
    def __index__(self):
        return "3"

>>> b = B()
>>> bin(b)
Traceback (most recent call last):
  File "<pyshell#21>", line 1, in <module>
    bin(b)
TypeError: __index__ returned non-int (type str)

2.3 对象定义了__index__方法，且返回值是整数，将__index__方法返回值转换成二进制字符串
>>> class C:
    def __index__(self):
        return 3

>>> c = C()
>>> bin(c)
'0b11'


()any:
全部元素为空返回True
any(['a', 'b', 'c', 'd'])  #列表list，元素都不为空或0
True
 
>>> any(['a', 'b', '', 'd'])  #列表list，存在一个为空的元素
True
 
>>> any([0, '', False])  #列表list,元素全为0,'',false
False
 
>>> any(('a', 'b', 'c', 'd'))  #元组tuple，元素都不为空或0
True
 
>>> any(('a', 'b', '', 'd'))  #元组tuple，存在一个为空的元素
True
 
>>> any((0, '', False))  #元组tuple，元素全为0,'',false
False
  
>>> any([]) # 空列表
False
 
>>> any(()) # 空元组
False

复制代码



()all
任意一个元素为空返回True
>>> all(['a', 'b', 'c', 'd'])  #列表list，元素都不为空或0
True
>>> all(['a', 'b', '', 'd'])  #列表list，存在一个为空的元素
False
>>> all([0, 1，2, 3])  #列表list，存在一个为0的元素
False
   
>>> all(('a', 'b', 'c', 'd'))  #元组tuple，元素都不为空或0
True
>>> all(('a', 'b', '', 'd'))  #元组tuple，存在一个为空的元素
False
>>> all((0, 1，2, 3))  #元组tuple，存在一个为0的元素
False
   
>>> all([]) # 空列表
True
>>> all(()) # 空元组
True


()str basestring unicode
for s in [u'asd', 'asd']:
    print isinstance(s, str)  # 用来判断是否为一般字符串
    print isinstance(s, basestring)

    print isinstance(s, unicode)   # 用来判断是否为unicode

结果:
False
True
True
True
True
False

basestring是str和unicode的超类
查看内建函数：

class basestring(object)

class str(basestring)

class unicode(basestring)

所以str和unicode是不同的，判断时需要注意字符串类型


